Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.

For example, given the following triangle

[
     [2],
    [3,4],
   [6,5,7],
  [4,1,8,3]
]

The minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 1 = 11).

Note:

Bonus point if you are able to do this using only O(n) extra space, where n is the total number of rows in the triangle.


/*
用DFS方法做超时了
*/

----------------------------------------
class Solution {
public:
    int minimumTotal(vector<vector<int>>& triangle) {
        for (int i = triangle.size() - 1; i > 0; i--) {
            for (int j = 0; j < triangle[i].size() - 1; j++) {
                triangle[i - 1][j] += min(triangle[i][j], triangle[i][j + 1]);
            }
        }
        return triangle[0][0];
    }
};

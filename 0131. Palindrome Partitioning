Given a string s, partition s such that every substring of the partition is a palindrome.

Return all possible palindrome partitioning of s.

Example:

Input: "aab"
Output:
[
  ["aa","b"],
  ["a","a","b"]
]


-----------------------------------------------------
class Solution {
public:
    bool isPal(string s) {
        for (int i = 0; i < s.size() / 2; i++) {
            if (s[i] != s[s.size() - 1 - i]) {
                return false;
            }
        }
        return true;
    }
    void dfs(vector<vector<string>> &v, vector<string> &tmp, string &s, int k) {
        if (k == s.size()) {
            v.push_back(tmp);
            return;
        }
        for (int i = k + 1; i <= s.size(); i++) {
            string p = s.substr(k, i - k);
            if (!isPal(p)) {
                continue;
            }
            tmp.push_back(p);
            dfs(v, tmp, s, i);
            tmp.pop_back();
        }
    }
    vector<vector<string>> partition(string s) {
        vector<vector<string>> v;
        vector<string> tmp;
        dfs(v, tmp, s, 0);
        return v;
    }
};

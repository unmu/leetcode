Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.

Note: A leaf is a node with no children.

Example:

Given the below binary tree and sum = 22,

      5
     / \
    4   8
   /   / \
  11  13  4
 /  \    / \
7    2  5   1

Return:

[
   [5,4,11,2],
   [5,8,4,5]
]


-----------------------------------------
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void dfs(vector<vector<int>> &v, TreeNode* root, int sum, vector<int> sol) {
        if (root == NULL) {
            return;
        }
        if (root -> left == NULL && root -> right == NULL) {
            sum -= root -> val;
            if (sum == 0) {
                sol.push_back(root -> val);
                v.push_back(sol);
            }
            return;
        }
        sol.push_back(root -> val);
        dfs(v, root -> left, sum - root -> val, sol);
        dfs(v, root -> right, sum - root -> val, sol);
        sol.pop_back();
    }
    vector<vector<int>> pathSum(TreeNode* root, int sum) {
        vector<vector<int>> v;
        vector<int> sol;
        dfs(v, root, sum, sol);
        return v;
    }
};

Given a set of candidate numbers (candidates) (without duplicates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.

The same repeated number may be chosen from candidates unlimited number of times.

Note:

    All numbers (including target) will be positive integers.
    The solution set must not contain duplicate combinations.

Example 1:

Input: candidates = [2,3,6,7], target = 7,
A solution set is:
[
  [7],
  [2,2,3]
]

Example 2:

Input: candidates = [2,3,5], target = 8,
A solution set is:
[
  [2,2,2,2],
  [2,3,3],
  [3,5]
]

 

Constraints:

    1 <= candidates.length <= 30
    1 <= candidates[i] <= 200
    Each element of candidate is unique.
    1 <= target <= 500


-------------------------------------------
class Solution {
public:
    void dfs(vector<vector<int>> &v, vector<int> &cand, vector<int> sol, int rest, int k) {
        if (rest == 0) {
            v.push_back(sol);
            return;
        }
        if (rest < 0) {
            return;
        }
        for (int i = k; i < cand.size(); i++) {
            sol.push_back(cand[i]);
            rest -= cand[i];
            dfs(v, cand, sol, rest, i);
            rest += cand[i];
            sol.pop_back();
        }
    }
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<vector<int>> v;
        vector<int> sol;
        // sort(candidates.begin(), candidates.end());
        dfs(v, candidates, sol, target, 0);
        return v;
    }
};

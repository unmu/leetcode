Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent.

A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.

Example:

Input: "23"
Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].

Note:

Although the above answer is in lexicographical order, your answer could be in any order you want.


--------------------------------------------------
class Solution {
public:
    vector<string> letterCombinations(string digits) {
        if (digits.length() == 0) {
            return {};
        }
        vector<string> v = {"", "", "abc", "def", "ghi",
                            "jkl", "mno", "pqrs", "tuv", "wxyz"};
        vector<string> ans = {""};
        for (int i = 0; i < digits.length(); i++) {
            string str = v[digits[i] - '0'];
            vector<string> tmp;
            for (int j = 0 ; j < str.length(); j++) {
                for (int k = 0; k < ans.size(); k++) {
                    tmp.push_back(ans[k] + str[j]);
                }
            }
            ans = tmp;
        }
        return ans;
    }
};

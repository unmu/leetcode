Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sums to target.

Each number in candidates may only be used once in the combination.

Note:

    All numbers (including target) will be positive integers.
    The solution set must not contain duplicate combinations.

Example 1:

Input: candidates = [10,1,2,7,6,1,5], target = 8,
A solution set is:
[
  [1, 7],
  [1, 2, 5],
  [2, 6],
  [1, 1, 6]
]

Example 2:

Input: candidates = [2,5,2,1,2], target = 5,
A solution set is:
[
  [1,2,2],
  [5]
]


------------------------------------------------------
class Solution {
public:
    void dfs(vector<vector<int>> &v, vector<int> &sol, vector<int> &cand, int rest, int k) {
        if (rest == 0) {
            if (find(v.begin(), v.end(), sol) == v.end()) {
                v.push_back(sol);
            }
            return;
        }
        if (rest < 0) {
            return;
        }
        for (int i = k + 1; i < cand.size(); i++) {
            sol.push_back(cand[i]);
            rest -= cand[i];
            dfs(v, sol, cand, rest, i);
            rest += cand[i];
            sol.pop_back();
        }
    }
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        vector<vector<int>> v;
        vector<int> sol;
        sort(candidates.begin(), candidates.end());
        dfs(v, sol, candidates, target, -1);
        return v;
    }
};

-----------------------------------------------------------
class Solution {
public:
    void dfs(vector<vector<int>> &v, vector<int> &sol, vector<int> &cand, int rest, int k) {
        if (rest == 0) {
            v.push_back(sol);
            return;
        }
        if (rest < 0) {
            return;
        }
        for (int i = k; i < cand.size(); i++) {
            if (i != k && cand[i] == cand[i - 1]) { //!!
                continue;
            }
            sol.push_back(cand[i]);
            rest -= cand[i];
            dfs(v, sol, cand, rest, i + 1);
            rest += cand[i];
            sol.pop_back();
        }
    }
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        vector<vector<int>> v;
        vector<int> sol;
        sort(candidates.begin(), candidates.end());
        dfs(v, sol, candidates, target, 0);
        return v;
    }
};

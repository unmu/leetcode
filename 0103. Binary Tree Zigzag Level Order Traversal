Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).

For example:
Given binary tree [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7

return its zigzag level order traversal as:

[
  [3],
  [20,9],
  [15,7]
]


------------------------------------------------
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void dfs(vector<vector<int>> &v, TreeNode* root, int h) {
        if (root == NULL) {
            return;
        }
        if (v.size() == h) {
            v.push_back(vector<int>());
        }
        if (h % 2 == 0) {
            v[h].push_back(root -> val);
        } else {
            v[h].insert(v[h].begin(), root -> val);
        }
        dfs(v, root -> left, h + 1);
        dfs(v, root -> right, h + 1);
    }
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        vector<vector<int>> v;
        dfs(v, root, 0);
        return v;
    }
};

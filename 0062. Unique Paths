A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).

The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).

How many possible unique paths are there?


Above is a 7 x 3 grid. How many possible unique paths are there?

 

Example 1:

Input: m = 3, n = 2
Output: 3
Explanation:
From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
1. Right -> Right -> Down
2. Right -> Down -> Right
3. Down -> Right -> Right

Example 2:

Input: m = 7, n = 3
Output: 28

 

Constraints:

    1 <= m, n <= 100
    It's guaranteed that the answer will be less than or equal to 2 * 10 ^ 9.


-----------------------------------------------
class Solution {
public:
    int d[101][101] = {0};
    int dfs(int x, int y, int &m, int &n) {
        if (x == m && y == n) {
            return 1;
        }
        if (x > m || y > n) {
            return 0;
        }
        if (d[x][y] != 0) {
            return d[x][y];
        }
        d[x][y] = dfs(x + 1, y, m, n) + dfs(x, y + 1, m, n);
        return d[x][y];
    }
    int uniquePaths(int m, int n) {
        return dfs(1, 1, m, n);
    }
};

-----------------------------------------------
一共有(C_(m-1+n-1))^(m-1)种情况
class Solution {
public:
    int uniquePaths(int m, int n) {
        m--;
        n--;
        if (m < n) {
            swap(m, n);
        }
        long ans = 1;
        int k = 2;
        for (int i = m + 1; i <= m + n; i++) {
            ans *= i;
            while (ans % k == 0 && k <= n) {
                ans /= k;
                k++;
            }
        }
        while (k <= n) {
            ans /= k;
            k++;
        }
        return int(ans);
    }
};

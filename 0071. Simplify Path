Given an absolute path for a file (Unix-style), simplify it. Or in other words, convert it to the canonical path.

In a UNIX-style file system, a period . refers to the current directory. Furthermore, a double period .. moves the directory up a level.

Note that the returned canonical path must always begin with a slash /, and there must be only a single slash / between two directory names. The last directory name (if it exists) must not end with a trailing /. Also, the canonical path must be the shortest string representing the absolute path.

 

Example 1:

Input: "/home/"
Output: "/home"
Explanation: Note that there is no trailing slash after the last directory name.

Example 2:

Input: "/../"
Output: "/"
Explanation: Going one level up from the root directory is a no-op, as the root level is the highest level you can go.

Example 3:

Input: "/home//foo/"
Output: "/home/foo"
Explanation: In the canonical path, multiple consecutive slashes are replaced by a single one.

Example 4:

Input: "/a/./b/../../c/"
Output: "/c"

Example 5:

Input: "/a/../../b/../c//.//"
Output: "/c"

Example 6:

Input: "/a//b////c/d//././/.."
Output: "/a/b/c"

/*
..   回上级目录
.    置当前目录
n个/ 区分文件名或.和..
*/

------------------------------------------------
class Solution {
public:
    string simplifyPath(string path) {
        stack<string> st;
        string ans;
        for (int i = 0; i < path.length(); i++) {
            string tmp;
            if (path[i] == '/') {
                continue;
            }
            while (path[i] != '/' && i < path.length()) {
                tmp += path[i];
                i++;
            }
            i--;
            if (tmp == ".") {
                continue;
            }
            if (tmp == "..") {
                if (!st.empty()) {
                    st.pop();
                }
            } else {
                st.push(tmp);
            }
        }
        if (st.empty()) {
            return "/";
        } else {
            while (!st.empty()) {
                ans = "/" + st.top() + ans;
                st.pop();
            }
        }
        return ans;
    }
};

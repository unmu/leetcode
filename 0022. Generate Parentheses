 Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

For example, given n = 3, a solution set is:

[
  "((()))",
  "(()())",
  "(())()",
  "()(())",
  "()()()"
]


-------------------------------------------
class Solution {
public:
    void dfs(vector<string> &v, string cur, int l, int r) {
        if (l == 0 && r == 0) {
            v.push_back(cur);
            return;
        }
        if (l > 0) {
            dfs(v, cur + "(", l - 1, r + 1);
        }
        if (r > 0) {
            dfs(v, cur + ")", l, r - 1);
        }
    }
    vector<string> generateParenthesis(int n) {
        vector<string> v;
        dfs(v, "", n, 0);
        return v;
    }
};

---------------------------------------------------
class Solution {
public:
    void backtrack(vector<string> &v, string cur, int open, int close, int max) {
        if (cur.length() == max * 2) {
            v.push_back(cur);
            return;
        }
        if (open < max) {
            backtrack(v, cur + "(", open + 1, close, max);
        }
        if (close < open) {
            backtrack(v, cur + ")", open, close + 1, max);
        }
    }
    vector<string> generateParenthesis(int n) {
        vector<string> v;
        backtrack(v, "", 0, 0, n);
        return v;
    }
};

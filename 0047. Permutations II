Given a collection of numbers that might contain duplicates, return all possible unique permutations.

Example:

Input: [1,1,2]
Output:
[
  [1,1,2],
  [1,2,1],
  [2,1,1]
]


-----------------------------------------------
class Solution {
public:
    void dfs(vector<vector<int>> &v, vector<int> &nums, vector<int> &tmp, vector<bool> &used) {
        if (nums.size() == tmp.size()) {
            v.push_back(tmp);
            return;
        }
        for (int i = 0; i < nums.size(); i++) {
            if (used[i] == false) {
                if (i > 0 && nums[i] == nums[i - 1] && used[i - 1] == false) {
                    continue;
                }
                used[i] = true;
                tmp.push_back(nums[i]);
                dfs(v, nums, tmp, used);
                tmp.pop_back();
                used[i] = false;
            }
        }
    }
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        vector<vector<int>> v;
        vector<bool> used(nums.size(), false);
        vector<int> tmp;
        dfs(v, nums, tmp, used);
        return v;
    }
};

Given a linked list, swap every two adjacent nodes and return its head.

You may not modify the values in the list's nodes, only nodes itself may be changed.

 

Example:

Given 1->2->3->4, you should return the list as 2->1->4->3.


-----------------------------------------------
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
        if (head == NULL || head -> next == NULL) {
            return head;
        }
        ListNode *tmp = head -> next;
        head -> next = swapPairs(head -> next -> next);
        tmp -> next = head;
        return tmp;
    }
};

------------------------------------------------------
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
        if (head == NULL || head -> next == NULL) {
            return head;
        }
        ListNode *ans = new ListNode(0, head), *p = head, *q = head -> next, *t = ans;
        while (p != NULL && q != NULL) {
            p -> next = q -> next;
            t -> next = q;
            q -> next = p;
            // return ans;
            t = p;
            p = p -> next;
            if (p != NULL) {
                q = p -> next;
            }
        }
        return ans -> next;
    }
};

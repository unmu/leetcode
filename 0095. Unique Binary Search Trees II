Given an integer n, generate all structurally unique BST's (binary search trees) that store values 1 ... n.

Example:

Input: 3
Output:
[
  [1,null,3,2],
  [3,2,null,1],
  [3,1,null,null,2],
  [2,1,3],
  [1,null,2,null,3]
]
Explanation:
The above output corresponds to the 5 unique BST's shown below:

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3

 

Constraints:

    0 <= n <= 8


---------------------------------------------------------
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<TreeNode *> dfs(int start, int end) {
        if (start > end) {
            return vector<TreeNode *>(1, NULL);
        }
        if (start == end) {
            return vector<TreeNode *>(1, new TreeNode(start));
        }
        vector<TreeNode *> res, left, right;
        for (int i = start; i <= end; i++) {
            left = dfs(start, i - 1);
            right = dfs(i + 1, end);
            for (TreeNode *lNode : left) {
                for (TreeNode *rNode : right) {
                    res.push_back(new TreeNode(i, lNode, rNode));
                }
            }
        }
        return res;
    }
    vector<TreeNode*> generateTrees(int n) {
        if (n == 0) {
            return vector<TreeNode *>();
        }
        return dfs(1, n);
    }
};

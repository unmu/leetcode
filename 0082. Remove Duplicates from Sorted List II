Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.

Return the linked list sorted as well.

Example 1:

Input: 1->2->3->3->4->4->5
Output: 1->2->5

Example 2:

Input: 1->1->1->2->3
Output: 2->3


--------------------------------------------
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        if (head == NULL || head -> next == NULL) {
            return head;
        }
        ListNode *ans = new ListNode(0, head), *p;
        if (head -> next -> val == head -> val) {
            p = ans;
        } else {
            p = head;
        }
        while (head != NULL) {
            while (head -> next != NULL && head -> val == head -> next -> val) {
                head = head -> next;
            }
            head = head -> next;
            if (head == NULL) {
                p -> next = NULL;
                break;
            }
            if (head -> next != NULL && head -> val == head -> next -> val) {
                continue;
            }
            p -> next = head;
            p = p -> next;
        }
        return ans -> next;
    }
};

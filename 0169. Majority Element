Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.

You may assume that the array is non-empty and the majority element always exist in the array.

Example 1:

Input: [3,2,3]
Output: 3

Example 2:

Input: [2,2,1,1,1,2,2]
Output: 2


-------------------------------------------------------
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int ans = nums[0], cnt = 1;
        //Boyer-Moore Voting Algorithm
        for (int i = 1; i < nums.size(); i++) {
            if (nums[i] == ans) {
                cnt++;
            } else {
                cnt--;
            }
            if (cnt == 0) {
                ans = nums[i];
                cnt = 1;
            }
            // if (cnt > nums.size() / 2) {
            //     return ans;//add these codes, get faster
            // }
        }
        return ans;
    }
};

-------------------------------------------------
Approach 6: Boyer-Moore Voting Algorithm

Intuition

If we had some way of counting instances of the majority element as +1+1+1 and 
instances of any other element as −1-1−1, summing them would make it obvious that 
the majority element is indeed the majority element.

Algorithm

Essentially, what Boyer-Moore does is look for a suffix suf of nums where 
suf[0] is the majority element in that suffix. To do this, we maintain 
a count, which is incremented whenever we see an instance of our current candidate 
for majority element and decremented whenever we see anything else. Whenever count 
equals 0, we effectively forget about everything in nums up to the current index 
and consider the current number as the candidate for majority element. It is not 
immediately obvious why we can get away with forgetting prefixes of nums - consider 
the following examples (pipes are inserted to separate runs of nonzero count).

[7, 7, 5, 7, 5, 1 | 5, 7 | 5, 5, 7, 7 | 7, 7, 7, 7]

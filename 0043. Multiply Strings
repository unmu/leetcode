Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.

Example 1:

Input: num1 = "2", num2 = "3"
Output: "6"

Example 2:

Input: num1 = "123", num2 = "456"
Output: "56088"

Note:

    The length of both num1 and num2 is < 110.
    Both num1 and num2 contain only digits 0-9.
    Both num1 and num2 do not contain any leading zero, except the number 0 itself.
    You must not use any built-in BigInteger library or convert the inputs to integer directly.


-----------------------------------------------
class Solution {
public:
    string multiply(string num1, string num2) {
        string ans;
        reverse(num1.begin(), num1.end());
        reverse(num2.begin(), num2.end());
        for (int i = 0; i< num1.length(); i++) {
            int carry[2] = {0};
            for (int j = 0; j < num2.length(); j++) {
                carry[0] = carry[1];
                carry[1] = ((num1[i] - '0') * (num2[j] - '0') + carry[0]) / 10;
                if (i + j >= ans.length()) {
                    ans += ((num1[i] - '0') * (num2[j] - '0') + carry[0]) % 10 + '0';
                } else {
                    if ((((num1[i] - '0') * (num2[j] - '0') + carry[0]) % 10 + ans[i + j] - '0') / 10 != 0) {
                        carry[1]++;
                    }
                    ans[i + j] = ((num1[i] - '0') * (num2[j] - '0') + carry[0] + ans[i + j] - '0') % 10 + '0';
                }
            }
            if (carry[1] != 0) {
                ans += carry[1] + '0';
            }
        }
        int i = ans.length() - 1;
        while (i > 0 && ans[i] == '0') {
            i--;
        }
        ans = ans.substr(0, i + 1);
        reverse(ans.begin(), ans.end());
        return ans;
    }
};

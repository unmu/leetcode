Given n, how many structurally unique BST's (binary search trees) that store values 1 ... n?

Example:

Input: 3
Output: 5
Explanation:
Given n = 3, there are a total of 5 unique BST's:

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3

 

Constraints:

    1 <= n <= 19


-------------------------------------------------
class Solution {
public:
    int numTrees(int n) {
        if (n == 1 || n == 1) {
            return 1;
        } else if (n == 2) {
            return 2;
        }
        int num[20] = {1, 1, 2};
        for (int i = 3; i <= n; i++) {
            for (int j = 1; j <= i; j++) {
                num[i] += num[j - 1] * num[i - j];
            }
        }
        return num[n];
    }
};

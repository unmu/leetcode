Given a collection of integers that might contain duplicates, nums, return all possible subsets (the power set).

Note: The solution set must not contain duplicate subsets.

Example:

Input: [1,2,2]
Output:
[
  [2],
  [1],
  [1,2,2],
  [2,2],
  [1,2],
  []
]


-------------------------------------------
class Solution {
public:
    void dfs(vector<vector<int>> &v, vector<int> &nums, vector<int> &tmp, int i) {
        if (i >= nums.size()) {
            v.push_back(tmp);
            return;
        }
        tmp.push_back(nums[i]);
        dfs(v, nums, tmp, i + 1);
        tmp.pop_back();
        i++;
        while (i > 0 && i < nums.size() && nums[i] == nums[i - 1]) {
            i++;
        }
        dfs(v, nums, tmp, i);
    }
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        vector<vector<int>> v;
        vector<int> tmp;
        dfs(v, nums, tmp, 0);
        return v;
    }
};

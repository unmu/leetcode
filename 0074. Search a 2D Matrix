Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

    Integers in each row are sorted from left to right.
    The first integer of each row is greater than the last integer of the previous row.

Example 1:

Input:
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 3
Output: true

Example 2:

Input:
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 13
Output: false


--------------------------------------------
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        if (matrix.size() == 0 || matrix[0].size() == 0) {
            return false;
        }
        if (target < matrix[0][0] || target > matrix[matrix.size() - 1][matrix[0].size() - 1]) {
            return false;
        }
        int low = 0, high = matrix.size() - 1, mid;
        while (low <= high) {
            mid = (high - low) / 2 + low;
            if (target == matrix[mid][0] || target == matrix[mid][matrix[0].size() - 1]) {
                return true;
            }
            if (target < matrix[mid][0]) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
            if (target > matrix[mid][0] && target < matrix[mid][matrix[0].size() - 1]) {
                break;
            }
        }
        int row = mid;
        low = 0, high = matrix[0].size() - 1;
        while (low <= high) {
            mid = (high - low) / 2 + low;
            if (target == matrix[row][mid]) {
                return true;
            }
            if (target < matrix[row][mid]) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return false;
    }
};

------------------------------------------
/*
此方法更快
*/
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        if (matrix.size() == 0 || matrix[0].size() == 0) {
            return false;
        }
        int row;
        if (target < matrix[0][0] || target > matrix[matrix.size() - 1][matrix[0].size() - 1]) {
            return false;
        }
        for (row = 1; row < matrix.size(); row++) {
            if (target == matrix[row][0] || target == matrix[row][matrix[0].size() - 1]) {
                return true;
            }
            if (target < matrix[row][0]) {
                break;
            }
        }
        row--;
        int low = 0, high = matrix[0].size() - 1;
        while (low <= high) {
            int mid = (high - low) / 2 + low;
            if (target == matrix[row][mid]) {
                return true;
            }
            if (target < matrix[row][mid]) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return false;
    }
};
